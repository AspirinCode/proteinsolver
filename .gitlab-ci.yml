image: registry.gitlab.com/ostrokach-docker/conda:centos7

stages:
  - pages
  - lint
  - build
  - test
  - doc
  - deploy

# === Variables ===

variables:
  PACKAGE_VERSION: "0.1.6"
  PYTHON_VERSION: "3.7"
  DOCS_SECRET_KEY: "d49e067ac2d5496f8b58f007bc8bd88e"

# === Configurations ===

.configure:
  before_script:
    # Set conda envs and pkgs dirs
    - mkdir -p "${CI_PROJECT_DIR}/.conda/envs" "${CI_PROJECT_DIR}/.conda/pkgs"
    - conda config --add envs_dirs "${CI_PROJECT_DIR}/.conda/envs"
    - conda config --add pkgs_dirs "${CI_PROJECT_DIR}/.conda/pkgs"
    - conda config --add channels pytorch
    - conda config --append channels kimlab
    # Set conda build dir
    - mkdir -p "${CI_PROJECT_DIR}/conda-bld"
    # Fix "FileNotFoundError(2, 'No such file or directory')" error
    - mkdir -p ~/.conda/envs
  except:
    variables:
      - $UPDATE_PAGES
      - $CI_COMMIT_MESSAGE =~ /\[pages\]/i

# === Lint ===

lint:
  stage: lint
  extends: .configure
  script:
    - conda create -n lint -q "python=${PYTHON_VERSION}" isort toml flake8 mypy black
    - source activate lint
    - python -m isort -p ${CI_PROJECT_NAME} -c
    - python -m flake8
    - python -m black --config pyproject.toml --check .
    # MyPy does not support namespace packages until this issue gets resolved:
    # https://github.com/python/mypy/issues/1645
    - python -m mypy -p ${CI_PROJECT_NAME} || true

# === Build ===

build:
  stage: build
  extends: .configure
  script:
    - cd "${CI_PROJECT_DIR}/.ci/conda"
    - conda build .
      --no-test
      --python $PYTHON_VERSION
      --output-folder "$CI_PROJECT_DIR/conda-bld"
  artifacts:
    paths:
      - conda-bld

# === Test ===

.install-torch-geometric: &install-torch-geometric
  - pip install torch-scatter
  - pip install torch-sparse
  - pip install torch-cluster
  - pip install torch-spline-conv
  - pip install torch-geometric

test:
  stage: test
  extends: .configure
  script:
    # Restore built packages
    - cp -r $CI_PROJECT_DIR/conda-bld/* /opt/conda/conda-bld/
    - conda index /opt/conda/conda-bld/
    # Create conda environment for testing
    - conda create -n test -q --use-local
      "python=${PYTHON_VERSION}" $CI_PROJECT_NAME gcc_linux-64 gxx_linux-64 || true
    - source activate test
    - which python
    - python -c "import ruamel.yaml"
    - python -c "from ruamel import yaml"
    - pip install pytest-cov
    - *install-torch-geometric
    # Run tests
    - PKG_INSTALL_DIR=$(python -c "import proteinsolver; print(proteinsolver.__path__[0])")
    - python -c "from ruamel import yaml"
    - echo ${PKG_INSTALL_DIR}
    - python -m pytest
      -c setup.cfg
      --color=yes
      --cov="${PKG_INSTALL_DIR}"
      --junitxml=pytest.xml
      tests/
    - sed -i "s|${PKG_INSTALL_DIR}/||g" .coverage
  coverage: /^TOTAL.* (\d+\%)/
  dependencies:
    - build
  artifacts:
    paths:
      - .coverage
    reports:
      junit: pytest.xml
  allow_failure: true

# === Docs ===

# NB: Has to be called "docs" for the pages script to work.
docs:
  stage: doc
  extends: .configure
  script:
    # Restore built packages
    - cp -r $CI_PROJECT_DIR/conda-bld/* /opt/conda/conda-bld/
    - conda index /opt/conda/conda-bld/
    # Create conda environment for testing
    - conda create -n test -q --use-local
      "python=${PYTHON_VERSION}" $CI_PROJECT_NAME gcc_linux-64 gxx_linux-64 nbconvert ipython ipykernel pandoc || true
    - source activate test
    - pip install -q sphinx sphinx_rtd_theme recommonmark sphinx-markdown-tables nbsphinx coverage
    - *install-torch-geometric
    # Build docs
    - sphinx-build ${CI_PROJECT_DIR}/docs public
    # Coverage
    - ls -al
    - coverage report || true
    - coverage html || true
    - mv htmlcov public/ || true
  coverage: /^TOTAL.* (\d+\%)/
  dependencies:
    - build
    - test
  artifacts:
    paths:
      - public
    when: always

# === Deploy ===

deploy:
  stage: deploy
  extends: .configure
  script:
    - anaconda -t $ANACONDA_TOKEN upload $CI_PROJECT_DIR/conda-bld/*/*.tar.bz2 -u ostrokach-forge --no-progress ;
  dependencies:
    - build
  only:
    - tags

# === Pages ===

.pages:
  stage: deploy
  before_script:
    - sudo yum update -y -q
    - sudo yum install -y -q unzip
    - pip install jinja2 python-gitlab
  script:
    # Set environment variables
    - export OUTPUT_DIR="./public/"
    # Add current docs to public
    - mv -f public latest || true
    - mkdir -p ${OUTPUT_DIR}
    - mv -f latest ${OUTPUT_DIR}/latest || true
    - if [[ -n ${CI_TAG_NAME} && -d ${OUTPUT_DIR}/latest ]] ; then
      cp -r ${OUTPUT_DIR}/latest ${OUTPUT_DIR}/${CI_TAG_NAME} ;
      fi
    # Download all previous docs
    - python .ci/pages/download_docs.py
      --project-id ${CI_PROJECT_ID}
      --job-name docs
      --private-token ${CI_DOCS_TOKEN}
      --output-dir ${OUTPUT_DIR}
  needs:
    - docs
  artifacts:
    paths:
      - public

pages:
  stage: pages
  before_script:
    - sudo yum update -y -q
    - sudo yum install -y -q unzip
    - pip install jinja2 python-gitlab
  script:
    # Set environment variables
    - export OUTPUT_DIR="./public/${DOCS_SECRET_KEY}"
    - mkdir -p ${OUTPUT_DIR}
    # Download all previous docs
    - python .ci/pages/download_docs.py
      --project-id ${CI_PROJECT_ID}
      --job-name docs
      --private-token ${CI_DOCS_TOKEN}
      --output-dir ${OUTPUT_DIR}
    # Whitepaper
    # - cp -r manuscript ${OUTPUT_DIR}
    # - mv ${OUTPUT_DIR}/manuscript/README.html ${OUTPUT_DIR}/manuscript/index.html
  artifacts:
    paths:
      - public
  only:
    variables:
      - $UPDATE_PAGES
      - $CI_COMMIT_MESSAGE =~ /\[pages\]/i
